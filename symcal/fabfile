/* Copyright (c) 2012-2015 Todd Freed <todd.freed@gmail.com>

   This file is part of fab.
   
   fab is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   fab is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with fab.  If not, see <http://www.gnu.org/licenses/>. */

# definitions
+[ $*/../vars.fab ]

# source invocations
+[ $dcommon ]() @common

# variables
$sdirs = [ $dsymcal  ~ lsr c -d ]
$copts = [ -fno-builtin-log [ $sdirs $dlibeval ~ s/^/-I ] ]

$cflags_xapi_final = [ $cflags_final -DXAPI_PROVIDE_BACKTRACE $copts ]
$cflags_xapi_debug = [ $cflags_debug -DXAPI_PROVIDE_BACKTRACE $copts ]
$cflags_xapi_devel = [ $cflags_devel -DXAPI_PROVIDE_BACKTRACE $copts ]
$cflags_final 		 = [ $cflags_final -DXAPI_PROVIDE_ERRCODE $copts ]
$cflags_debug 		 = [ $cflags_debug -DXAPI_PROVIDE_ERRCODE $copts ]
$cflags_devel 		 = [ $cflags_devel -DXAPI_PROVIDE_ERRCODE $copts ]

$rpath = [ 
	[ $dlibeval ~ [ ?{ [ rb{$*} ~ j ] "s{^}{'-Wl,-rpath,$ORIGIN/}" "s{$}{'}" ~ fi ] ]
]
$lflags_xapi_final = [ $lflags_final -lxapi $libeval_final ]
$lflags_xapi_debug = [ $lflags_debug -lxapi $libeval_debug ]
$lflags_xapi_devel = [ $lflags_devel -lxapi $libeval_devel $rpath ]
$lflags_final 		 = [ $lflags_final $libeval_final ]
$lflags_debug 		 = [ $lflags_debug $libeval_debug ]
$lflags_devel 		 = [ $lflags_devel $libeval_devel $rpath ]

# standard files - standard compilation
+[@std.c]($dext = [ final.o ]; $dirs = $sdirs; $cc; $cflags = $cflags_final)
+[@std.c]($dext = [ debug.o ]; $dirs = $sdirs; $cc; $cflags = $cflags_debug)
+[@std.c]($dext = [ devel.o ]; $dirs = $sdirs; $cc; $cflags = $cflags_devel)
+[@std.c]($dext = [ xapi.final.o ]; $dirs = $sdirs; $cc; $cflags = $cflags_xapi_final)
+[@std.c]($dext = [ xapi.debug.o ]; $dirs = $sdirs; $cc; $cflags = $cflags_xapi_debug)
+[@std.c]($dext = [ xapi.devel.o ]; $dirs = $sdirs; $cc; $cflags = $cflags_xapi_devel)

#
# catchall node
#
[ @all ] : [ @final @debug @devel ]
[ @final ] : [ $symcal_final $symcal_xapi_final ]
[ @debug ] : [ $symcal_debug $symcal_xapi_debug ]
[ @devel ] : [ $symcal_devel $symcal_xapi_devel ]

#
# executables
#
[ $symcal_final ] :^ [ $libeval_final ]
[ $symcal_debug ] :^ [ $libeval_debug ]
[ $symcal_devel ] :^ [ $libeval_devel ]
[ $symcal_xapi_final ] :^ [ $libeval_xapi_final ]
[ $symcal_xapi_debug ] :^ [ $libeval_xapi_debug ]
[ $symcal_xapi_devel ] :^ [ $libeval_xapi_devel ]

[ $symcal_final ] : [ $dsymcal/main.final.o ~ j ] 
{
	[ $cc ] [ $cflags_final ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw rx lx/o uu fi ] [ $lflags_final ~ fi ]
}

[ $symcal_debug ] : [ $dsymcal/main.debug.o ~ j ] 
{
	[ $cc ] [ $cflags_debug ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw rx lx/o uu fi ] [ $lflags_debug ~ fi ]
}

[ $symcal_devel ] : [ $dsymcal/main.devel.o ~ j ] 
{
	[ $cc ] [ $cflags_devel ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw rx lx/o uu fi ] [ $lflags_devel ~ fi ]
}

[ $symcal_xapi_final ] : [ $dsymcal/main.xapi.final.o ~ j ] 
{
	[ $cc ] [ $cflags_final ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw rx lx/o uu fi ] [ $lflags_xapi_final ~ fi ]
}

[ $symcal_xapi_debug ] : [ $dsymcal/main.xapi.debug.o ~ j ] 
{
	[ $cc ] [ $cflags_debug ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw rx lx/o uu fi ] [ $lflags_xapi_debug ~ fi ]
}

[ $symcal_xapi_devel ] : [ $dsymcal/main.xapi.devel.o ~ j ] 
{
	[ $cc ] [ $cflags_devel ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw rx lx/o uu fi ] [ $lflags_xapi_devel ~ fi ]
}

#
# tasks
#

[ @install.base.final ] : [ @final ]
{
	install -d																			[ $destdir/$bindir ]
	rm																							[ $destdir/$bindir/symcal ] 2>/dev/null
	install [ $symcal_final ]												[ $destdir/$bindir/symcal ]
}

[ @install.base.debug ] : [ @debug ]
{
	install -d																			[ $destdir/$bindir ]
	rm																							[ $destdir/$bindir/symcal ] 2>/dev/null
	install [ $symcal_debug ]												[ $destdir/$bindir/symcal ]
}

[ @install.dist.debug ] : [ @install.base.debug ]
[ @install.local.debug ] : [ @install.base.debug ]
